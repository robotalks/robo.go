// Code generated by protoc-gen-go. DO NOT EDIT.
// source: robo/l1/v1/commands.proto

package l1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Typed is the container message wrapping a message of specific type.
// The wrapped message is stored as a byte array and needs to be decoded
// according to type_id.
type Typed struct {
	// type_id indicates the actual message type to decode the message.
	// bit 31 is reserved to indicate the message is a command (expecting
	// a response) or an event (no response expected).
	// bit 16..30 is used as message group, and bit 0..15 are type ID inside
	// the message group.
	TypeId uint32 `protobuf:"varint,1,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	// sequence is set on command messages (request and response).
	// The value is set by the requestor.
	// It's possible the commands are executed in arbitrary orders, the responses
	// must match the same sequence in requests.
	Sequence uint32 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// message is the raw encoded message.
	Message              []byte   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Typed) Reset()         { *m = Typed{} }
func (m *Typed) String() string { return proto.CompactTextString(m) }
func (*Typed) ProtoMessage()    {}
func (*Typed) Descriptor() ([]byte, []int) {
	return fileDescriptor_commands_985485175d62579f, []int{0}
}
func (m *Typed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Typed.Unmarshal(m, b)
}
func (m *Typed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Typed.Marshal(b, m, deterministic)
}
func (dst *Typed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Typed.Merge(dst, src)
}
func (m *Typed) XXX_Size() int {
	return xxx_messageInfo_Typed.Size(m)
}
func (m *Typed) XXX_DiscardUnknown() {
	xxx_messageInfo_Typed.DiscardUnknown(m)
}

var xxx_messageInfo_Typed proto.InternalMessageInfo

func (m *Typed) GetTypeId() uint32 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *Typed) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Typed) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

// CommandOK is a general reply indicating success for commands.
type CommandOK struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandOK) Reset()         { *m = CommandOK{} }
func (m *CommandOK) String() string { return proto.CompactTextString(m) }
func (*CommandOK) ProtoMessage()    {}
func (*CommandOK) Descriptor() ([]byte, []int) {
	return fileDescriptor_commands_985485175d62579f, []int{1}
}
func (m *CommandOK) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandOK.Unmarshal(m, b)
}
func (m *CommandOK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandOK.Marshal(b, m, deterministic)
}
func (dst *CommandOK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandOK.Merge(dst, src)
}
func (m *CommandOK) XXX_Size() int {
	return xxx_messageInfo_CommandOK.Size(m)
}
func (m *CommandOK) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandOK.DiscardUnknown(m)
}

var xxx_messageInfo_CommandOK proto.InternalMessageInfo

// CommandErr delivers a generic error response for
// command messages.
type CommandErr struct {
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandErr) Reset()         { *m = CommandErr{} }
func (m *CommandErr) String() string { return proto.CompactTextString(m) }
func (*CommandErr) ProtoMessage()    {}
func (*CommandErr) Descriptor() ([]byte, []int) {
	return fileDescriptor_commands_985485175d62579f, []int{2}
}
func (m *CommandErr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandErr.Unmarshal(m, b)
}
func (m *CommandErr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandErr.Marshal(b, m, deterministic)
}
func (dst *CommandErr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandErr.Merge(dst, src)
}
func (m *CommandErr) XXX_Size() int {
	return xxx_messageInfo_CommandErr.Size(m)
}
func (m *CommandErr) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandErr.DiscardUnknown(m)
}

var xxx_messageInfo_CommandErr proto.InternalMessageInfo

func (m *CommandErr) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Nav2DCapsQuery queries the capabilities of 2D navigation.
type Nav2DCapsQuery struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nav2DCapsQuery) Reset()         { *m = Nav2DCapsQuery{} }
func (m *Nav2DCapsQuery) String() string { return proto.CompactTextString(m) }
func (*Nav2DCapsQuery) ProtoMessage()    {}
func (*Nav2DCapsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_commands_985485175d62579f, []int{3}
}
func (m *Nav2DCapsQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nav2DCapsQuery.Unmarshal(m, b)
}
func (m *Nav2DCapsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nav2DCapsQuery.Marshal(b, m, deterministic)
}
func (dst *Nav2DCapsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nav2DCapsQuery.Merge(dst, src)
}
func (m *Nav2DCapsQuery) XXX_Size() int {
	return xxx_messageInfo_Nav2DCapsQuery.Size(m)
}
func (m *Nav2DCapsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_Nav2DCapsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_Nav2DCapsQuery proto.InternalMessageInfo

// Nav2DCaps is the result of Nav2DCapsQuery.
type Nav2DCaps struct {
	// drive_speed_min and drive_speed_max is the min/max speed the device is
	// able to drive with Nav2DDrive command. drive_speed_min is optional,
	// however, it's recommended as some device won't move with a speed below
	// certain value.
	DriveSpeedMin float32 `protobuf:"fixed32,1,opt,name=drive_speed_min,json=driveSpeedMin,proto3" json:"drive_speed_min,omitempty"`
	DriveSpeedMax float32 `protobuf:"fixed32,2,opt,name=drive_speed_max,json=driveSpeedMax,proto3" json:"drive_speed_max,omitempty"`
	// min/max speeds for Nav2DTurn command.
	TurnSpeedMin         float32  `protobuf:"fixed32,3,opt,name=turn_speed_min,json=turnSpeedMin,proto3" json:"turn_speed_min,omitempty"`
	TurnSpeedMax         float32  `protobuf:"fixed32,4,opt,name=turn_speed_max,json=turnSpeedMax,proto3" json:"turn_speed_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nav2DCaps) Reset()         { *m = Nav2DCaps{} }
func (m *Nav2DCaps) String() string { return proto.CompactTextString(m) }
func (*Nav2DCaps) ProtoMessage()    {}
func (*Nav2DCaps) Descriptor() ([]byte, []int) {
	return fileDescriptor_commands_985485175d62579f, []int{4}
}
func (m *Nav2DCaps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nav2DCaps.Unmarshal(m, b)
}
func (m *Nav2DCaps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nav2DCaps.Marshal(b, m, deterministic)
}
func (dst *Nav2DCaps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nav2DCaps.Merge(dst, src)
}
func (m *Nav2DCaps) XXX_Size() int {
	return xxx_messageInfo_Nav2DCaps.Size(m)
}
func (m *Nav2DCaps) XXX_DiscardUnknown() {
	xxx_messageInfo_Nav2DCaps.DiscardUnknown(m)
}

var xxx_messageInfo_Nav2DCaps proto.InternalMessageInfo

func (m *Nav2DCaps) GetDriveSpeedMin() float32 {
	if m != nil {
		return m.DriveSpeedMin
	}
	return 0
}

func (m *Nav2DCaps) GetDriveSpeedMax() float32 {
	if m != nil {
		return m.DriveSpeedMax
	}
	return 0
}

func (m *Nav2DCaps) GetTurnSpeedMin() float32 {
	if m != nil {
		return m.TurnSpeedMin
	}
	return 0
}

func (m *Nav2DCaps) GetTurnSpeedMax() float32 {
	if m != nil {
		return m.TurnSpeedMax
	}
	return 0
}

// Nav2DDrive moves forward/backward with specified speed.
// Acceleration is optional.
// Sending Nav2DDrive will stop in-progress NavTurn.
type Nav2DDrive struct {
	// stablized speed of motion, 0 to stop.
	// positive value for forward, negative value for backward.
	Speed                float32  `protobuf:"fixed32,1,opt,name=speed,proto3" json:"speed,omitempty"`
	Accelation           float32  `protobuf:"fixed32,2,opt,name=accelation,proto3" json:"accelation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nav2DDrive) Reset()         { *m = Nav2DDrive{} }
func (m *Nav2DDrive) String() string { return proto.CompactTextString(m) }
func (*Nav2DDrive) ProtoMessage()    {}
func (*Nav2DDrive) Descriptor() ([]byte, []int) {
	return fileDescriptor_commands_985485175d62579f, []int{5}
}
func (m *Nav2DDrive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nav2DDrive.Unmarshal(m, b)
}
func (m *Nav2DDrive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nav2DDrive.Marshal(b, m, deterministic)
}
func (dst *Nav2DDrive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nav2DDrive.Merge(dst, src)
}
func (m *Nav2DDrive) XXX_Size() int {
	return xxx_messageInfo_Nav2DDrive.Size(m)
}
func (m *Nav2DDrive) XXX_DiscardUnknown() {
	xxx_messageInfo_Nav2DDrive.DiscardUnknown(m)
}

var xxx_messageInfo_Nav2DDrive proto.InternalMessageInfo

func (m *Nav2DDrive) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *Nav2DDrive) GetAccelation() float32 {
	if m != nil {
		return m.Accelation
	}
	return 0
}

// Nav2DTurn starts/stops turning in the specified direction and speed.
// Sending NavTurn will stop in-progress NavDrive.
type Nav2DTurn struct {
	// turning speed, in radians/s, 0 to stop.
	// right-hand rule: positive for left, negative for right.
	Speed                float32  `protobuf:"fixed32,1,opt,name=speed,proto3" json:"speed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nav2DTurn) Reset()         { *m = Nav2DTurn{} }
func (m *Nav2DTurn) String() string { return proto.CompactTextString(m) }
func (*Nav2DTurn) ProtoMessage()    {}
func (*Nav2DTurn) Descriptor() ([]byte, []int) {
	return fileDescriptor_commands_985485175d62579f, []int{6}
}
func (m *Nav2DTurn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nav2DTurn.Unmarshal(m, b)
}
func (m *Nav2DTurn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nav2DTurn.Marshal(b, m, deterministic)
}
func (dst *Nav2DTurn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nav2DTurn.Merge(dst, src)
}
func (m *Nav2DTurn) XXX_Size() int {
	return xxx_messageInfo_Nav2DTurn.Size(m)
}
func (m *Nav2DTurn) XXX_DiscardUnknown() {
	xxx_messageInfo_Nav2DTurn.DiscardUnknown(m)
}

var xxx_messageInfo_Nav2DTurn proto.InternalMessageInfo

func (m *Nav2DTurn) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func init() {
	proto.RegisterType((*Typed)(nil), "robo.l1.v1.Typed")
	proto.RegisterType((*CommandOK)(nil), "robo.l1.v1.CommandOK")
	proto.RegisterType((*CommandErr)(nil), "robo.l1.v1.CommandErr")
	proto.RegisterType((*Nav2DCapsQuery)(nil), "robo.l1.v1.Nav2DCapsQuery")
	proto.RegisterType((*Nav2DCaps)(nil), "robo.l1.v1.Nav2DCaps")
	proto.RegisterType((*Nav2DDrive)(nil), "robo.l1.v1.Nav2DDrive")
	proto.RegisterType((*Nav2DTurn)(nil), "robo.l1.v1.Nav2DTurn")
}

func init() { proto.RegisterFile("robo/l1/v1/commands.proto", fileDescriptor_commands_985485175d62579f) }

var fileDescriptor_commands_985485175d62579f = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x5f, 0x4b, 0xc3, 0x30,
	0x14, 0xc5, 0xe9, 0xfe, 0xba, 0xeb, 0x36, 0x25, 0x08, 0x56, 0x1f, 0x64, 0x06, 0x19, 0x7b, 0xda,
	0xa8, 0x7e, 0x83, 0x6d, 0x3e, 0x88, 0xa8, 0x58, 0x87, 0x0f, 0xbe, 0x94, 0xac, 0xb9, 0x48, 0xa1,
	0x4d, 0x6a, 0xd2, 0x96, 0xf6, 0x13, 0xf9, 0x35, 0xa5, 0x59, 0xad, 0xb3, 0xfa, 0x78, 0xce, 0xfd,
	0xdd, 0x73, 0x4f, 0x08, 0x9c, 0x29, 0xb9, 0x95, 0x8b, 0xd0, 0x59, 0x64, 0xce, 0xc2, 0x97, 0x51,
	0xc4, 0x04, 0xd7, 0xf3, 0x58, 0xc9, 0x44, 0x12, 0x28, 0x47, 0xf3, 0xd0, 0x99, 0x67, 0x0e, 0x7d,
	0x85, 0xee, 0xa6, 0x88, 0x91, 0x93, 0x53, 0xe8, 0x27, 0x45, 0x8c, 0x5e, 0xc0, 0x6d, 0x6b, 0x62,
	0xcd, 0x46, 0x6e, 0xaf, 0x94, 0x77, 0x9c, 0x9c, 0xc3, 0x81, 0xc6, 0x8f, 0x14, 0x85, 0x8f, 0x76,
	0xcb, 0x4c, 0x6a, 0x4d, 0x6c, 0xe8, 0x47, 0xa8, 0x35, 0x7b, 0x47, 0xbb, 0x3d, 0xb1, 0x66, 0x43,
	0xf7, 0x5b, 0xd2, 0x43, 0x18, 0xac, 0x76, 0x57, 0x9f, 0xee, 0xe9, 0x14, 0xa0, 0x12, 0xb7, 0x4a,
	0x35, 0x97, 0x06, 0x3f, 0x4b, 0xc7, 0x30, 0x7e, 0x64, 0xd9, 0xf5, 0x7a, 0xc5, 0x62, 0xfd, 0x9c,
	0xa2, 0x2a, 0xe8, 0xa7, 0x05, 0x83, 0xda, 0x22, 0x53, 0x38, 0xe2, 0x2a, 0xc8, 0xd0, 0xd3, 0x31,
	0x22, 0xf7, 0xa2, 0x40, 0x98, 0xae, 0x2d, 0x77, 0x64, 0xec, 0x97, 0xd2, 0x7d, 0x08, 0xc4, 0x1f,
	0x8e, 0xe5, 0xa6, 0xf9, 0x6f, 0x8e, 0xe5, 0xe4, 0x0a, 0xc6, 0x49, 0xaa, 0xc4, 0x5e, 0x5c, 0xdb,
	0x60, 0xc3, 0xd2, 0xad, 0xd3, 0x1a, 0x14, 0xcb, 0xed, 0x4e, 0x93, 0x62, 0x39, 0x5d, 0x02, 0x98,
	0xa2, 0xeb, 0xf2, 0x02, 0x39, 0x81, 0xae, 0xc1, 0xab, 0x7e, 0x3b, 0x41, 0x2e, 0x00, 0x98, 0xef,
	0x63, 0xc8, 0x92, 0x40, 0x8a, 0xaa, 0xd2, 0x9e, 0x43, 0x2f, 0xab, 0xc7, 0x6e, 0x52, 0x25, 0xfe,
	0x8f, 0x58, 0x76, 0xde, 0x5a, 0xa1, 0xb3, 0xed, 0x99, 0x8f, 0xbc, 0xf9, 0x0a, 0x00, 0x00, 0xff,
	0xff, 0x3d, 0xb7, 0x3f, 0xae, 0xe5, 0x01, 0x00, 0x00,
}
